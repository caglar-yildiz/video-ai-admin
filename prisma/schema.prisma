datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-1.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  surname                  String?
  username                 String?   @unique
  email                    String?   @unique
  emailVerified            DateTime? @map("email_verified")
  emailVerificationToken   String?   @unique @map("email_verification_token")
  passwordHash             String?   @map("password_hash")
  resetPasswordToken       String?   @unique @map("reset_password_token")
  resetPasswordTokenExpiry DateTime? @map("reset_password_token_expiery")
  image                    String?
  createdAt                DateTime  @default(now()) @map("created_at")
  accounts                 Account[] @relation(name: "AccountToUser")
  sessions                 Session[] @relation(name: "SessionToUser")
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?
  role           UserRole       @default(USER)
  subscription   Subscription?   @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  dubbing   Dubbing[]
  paymentTransactions PaymentTransaction[]
  credit            Int?      @default(100)
  BillingInfos BillingInfo?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("newsletter_subscribers")
}

model Organization {
  id   String    @id @default(cuid())
  name String
  email String  @unique
  users User[]
  invites Invite[]
  @@map("organizations")
}

model Invite {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  organizationId   String
  organization     Organization    @relation(fields: [organizationId], references: [id])
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

model Subscription {
  id         String       @id @default(cuid())
  type       SubscriptionType
  price      Float
  country    Country            @relation(fields: [countryId], references: [id])
  countryId  String
  users      User[]
  @@map("subscriptions")
}

enum SubscriptionType {
  FREE
  PREMIUM
  PLATINIUM
  CUSTOM
}

model Country {
  id             String           @id @default(cuid())
  code           String
  name           String
  subscriptions  Subscription[]
  products  Product[]
  @@map("countries")
}

model Dubbing {
  id  String @id @default(cuid())
  user_id String
  input_url  String?
  input_lang_id Int
  output_lang_id  Int
  credit_cost Int
  video_url String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  status  DubbingStatus
  input_lang     Language @relation("InputLangToDubbing", fields: [input_lang_id], references: [id])
  output_lang    Language @relation("OutputLangToDubbing", fields: [output_lang_id], references: [id])
  user  User  @relation(fields: [user_id], references : [id])
}

model Language {
  id  Int @id @default(autoincrement())
  name  String
  country_code  String
  input_dubbing     Dubbing[]   @relation("InputLangToDubbing")
  output_dubbing     Dubbing[]  @relation("OutputLangToDubbing")

  @@map("languages")
}

enum DubbingStatus {
  SUBMITTED
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionStatus {
  PROCESSING
  COMPLETED
  FAILED
}

model Product {
  id                  Int                @id @default(autoincrement())
  name                String
  credits_amount      Int
  price               Float
  paymentTransactions PaymentTransaction[]
  countryId           String
  country             Country           @relation(fields: [countryId], references: [id])
  descriptions        ProductDescription[]

  @@map("products")
}

model ProductDescription {
  id          Int      @id @default(autoincrement())
  description String
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])

  @@map("product_descriptions")
}

model PaymentTransaction {
  id                Int                  @id @default(autoincrement())
  userId            String
  productId         Int
  amountPaid        Float                @map("amount_paid")
  paymentMethod     String               @map("payment_method")
  transactionAt     DateTime?             @default(now()) @map("transaction_date")
  status            TransactionStatus
  product           Product            @relation(fields: [productId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])
  @@map("payment_transactions")
}

model BillingInfo {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String
  phoneNumber      String
  billingAddress   String
  billingCity      String
  billingState     String?
  billingPostalCode String
  billingCountry   String
  title            String
  userId           String  @unique
  User             User    @relation(fields: [userId], references: [id])
}

model FAQ {
  id          Int      @id @default(autoincrement())
  question    String
  answer      String
  lang        SupportedLang
}

enum SupportedLang {
  en
  tr
  de
}
